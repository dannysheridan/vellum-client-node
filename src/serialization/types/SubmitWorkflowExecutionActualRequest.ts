/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const SubmitWorkflowExecutionActualRequest: core.serialization.Schema<
    serializers.SubmitWorkflowExecutionActualRequest.Raw,
    Vellum.SubmitWorkflowExecutionActualRequest
> = core.serialization
    .union(core.serialization.discriminant("outputType", "output_type"), {
        STRING: core.serialization.lazyObject(async () => (await import("..")).WorkflowExecutionActualStringRequest),
        JSON: core.serialization.lazyObject(async () => (await import("..")).WorkflowExecutionActualJsonRequest),
        CHAT_HISTORY: core.serialization.lazyObject(
            async () => (await import("..")).WorkflowExecutionActualChatHistoryRequest
        ),
    })
    .transform<Vellum.SubmitWorkflowExecutionActualRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SubmitWorkflowExecutionActualRequest {
    type Raw =
        | SubmitWorkflowExecutionActualRequest.String
        | SubmitWorkflowExecutionActualRequest.Json
        | SubmitWorkflowExecutionActualRequest.ChatHistory;

    interface String extends serializers.WorkflowExecutionActualStringRequest.Raw {
        output_type: "STRING";
    }

    interface Json extends serializers.WorkflowExecutionActualJsonRequest.Raw {
        output_type: "JSON";
    }

    interface ChatHistory extends serializers.WorkflowExecutionActualChatHistoryRequest.Raw {
        output_type: "CHAT_HISTORY";
    }
}
