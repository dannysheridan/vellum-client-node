/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vellum from "../../api";
import * as core from "../../core";

export const SearchRequestOptionsRequest: core.serialization.ObjectSchema<
    serializers.SearchRequestOptionsRequest.Raw,
    Vellum.SearchRequestOptionsRequest
> = core.serialization.object({
    limit: core.serialization.number().optional(),
    weights: core.serialization.lazyObject(async () => (await import("..")).SearchWeightsRequest).optional(),
    resultMerging: core.serialization.property(
        "result_merging",
        core.serialization.lazyObject(async () => (await import("..")).SearchResultMergingRequest).optional()
    ),
    filters: core.serialization.lazyObject(async () => (await import("..")).SearchFiltersRequest).optional(),
});

export declare namespace SearchRequestOptionsRequest {
    interface Raw {
        limit?: number | null;
        weights?: serializers.SearchWeightsRequest.Raw | null;
        result_merging?: serializers.SearchResultMergingRequest.Raw | null;
        filters?: serializers.SearchFiltersRequest.Raw | null;
    }
}
