/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Vellum from "../../../../../api";
import * as core from "../../../../../core";

export const RegisterPromptRequestRequest: core.serialization.Schema<
    serializers.RegisterPromptRequestRequest.Raw,
    Vellum.RegisterPromptRequestRequest
> = core.serialization.object({
    label: core.serialization.string(),
    name: core.serialization.string(),
    prompt: core.serialization.lazyObject(async () => (await import("../../../..")).RegisterPromptPromptInfoRequest),
    provider: core.serialization.lazy(async () => (await import("../../../..")).ProviderEnum).optional(),
    model: core.serialization.string(),
    parameters: core.serialization.lazyObject(
        async () => (await import("../../../..")).RegisterPromptModelParametersRequest
    ),
    meta: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
});

export declare namespace RegisterPromptRequestRequest {
    interface Raw {
        label: string;
        name: string;
        prompt: serializers.RegisterPromptPromptInfoRequest.Raw;
        provider?: serializers.ProviderEnum.Raw | null;
        model: string;
        parameters: serializers.RegisterPromptModelParametersRequest.Raw;
        meta?: Record<string, unknown> | null;
    }
}
