/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as fs from "fs";
import { Vellum } from "@fern-api/vellum";
import FormData from "form-data";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Document {
    interface Options {
        environment?: environments.VellumEnvironment | environments.VellumEnvironmentUrls;
        apiKey: core.Supplier<string>;
    }
}

export class Document {
    constructor(private readonly options: Document.Options) {}

    /**
     * @throws {Vellum.BadRequestError}
     * @throws {Vellum.NotFoundError}
     * @throws {Vellum.InternalServerError}
     */
    public async upload(
        contents: File | fs.ReadStream,
        request: Vellum.UploadDocumentRequest
    ): Promise<Vellum.UploadDocumentResponse> {
        const _request = new FormData();
        if (request.addToIndexNames != null) {
            _request.append("add_to_index_names", JSON.stringify(request.addToIndexNames));
        }

        if (request.externalId != null) {
            _request.append("external_id", request.externalId);
        }

        _request.append("label", request.label);
        _request.append("contents", contents);
        if (request.keywords != null) {
            _request.append("keywords", JSON.stringify(request.keywords));
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumEnvironment.Production).document,
                "/v1/upload-document"
            ),
            method: "POST",
            contentType: "multipart/form-data",
            body: _request,
        });
        if (_response.ok) {
            return await serializers.UploadDocumentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 400:
                    throw new Vellum.NotFoundError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 400:
                    throw new Vellum.InternalServerError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
