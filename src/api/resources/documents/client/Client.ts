/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Vellum } from "@fern-api/vellum";
import URLSearchParams from "@ungap/url-search-params";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";
import * as fs from "fs";
import FormData from "form-data";

export declare namespace Documents {
    interface Options {
        environment?: environments.VellumEnvironment | environments.VellumEnvironmentUrls;
        apiKey: core.Supplier<string>;
    }
}

export class Documents {
    constructor(protected readonly options: Documents.Options) {}

    public async list(request: Vellum.ListDocumentsRequest = {}): Promise<Vellum.PaginatedSlimDocumentList> {
        const { documentIndexId, limit, offset, ordering } = request;
        const _queryParams = new URLSearchParams();
        if (documentIndexId != null) {
            _queryParams.append("document_index_id", documentIndexId);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (offset != null) {
            _queryParams.append("offset", offset.toString());
        }

        if (ordering != null) {
            _queryParams.append("ordering", ordering);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumEnvironment.Production).default,
                "v1/documents"
            ),
            method: "GET",
            headers: {
                X_API_KEY: await core.Supplier.get(this.options.apiKey),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.PaginatedSlimDocumentList.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async upload(
        contents: File | fs.ReadStream,
        request: Vellum.UploadDocumentRequestBodyRequest
    ): Promise<Vellum.UploadDocumentResponse> {
        const _request = new FormData();
        for (const _item of request.addToIndexNames) {
            _request.append("add_to_index_names", _item);
        }

        _request.append("external_id", request.externalId);
        _request.append("label", request.label);
        _request.append("contents", contents);
        for (const _item of request.keywords) {
            _request.append("keywords", _item);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumEnvironment.Production).documents,
                "v1/upload-document"
            ),
            method: "POST",
            headers: {
                X_API_KEY: await core.Supplier.get(this.options.apiKey),
                "Content-Length": (await core.getFormDataContentLength(_request)).toString(),
            },
            contentType: "multipart/form-data; boundary=" + _request.getBoundary(),
            body: _request,
        });
        if (_response.ok) {
            return await serializers.UploadDocumentResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.VellumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
