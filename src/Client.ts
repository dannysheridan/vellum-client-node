/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { VellumApi } from "@fern-api/vellum";
import urlJoin from "url-join";
import * as serializers from "./serialization";
import * as errors from "./errors";
import { CompletionActuals } from "./api/resources/completionActuals/client/Client";
import { Document } from "./api/resources/document/client/Client";

export declare namespace VellumApiClient {
    interface Options {
        environment?: environments.VellumApiEnvironment | environments.VellumApiEnvironmentUrls;
        apiKey: core.Supplier<string>;
    }
}

export class VellumApiClient {
    constructor(private readonly options: VellumApiClient.Options) {}

    /**
     * @throws {VellumApi.BadRequestError}
     * @throws {VellumApi.NotFoundError}
     * @throws {VellumApi.InternalServerError}
     */
    public async generate(request: VellumApi.BatchGenerateRequest): Promise<VellumApi.GenerateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumApiEnvironment.Production).predict,
                "v1/generate"
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.BatchGenerateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.GenerateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new VellumApi.BadRequestError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 400:
                    throw new VellumApi.NotFoundError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 400:
                    throw new VellumApi.InternalServerError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.VellumApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumApiTimeoutError();
            case "unknown":
                throw new errors.VellumApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {VellumApi.BadRequestError}
     * @throws {VellumApi.NotFoundError}
     * @throws {VellumApi.InternalServerError}
     */
    public async search(request: VellumApi.SearchRequest): Promise<VellumApi.SearchResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumApiEnvironment.Production).predict,
                "v1/search"
            ),
            method: "POST",
            contentType: "application/json",
            body: await serializers.SearchRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.SearchResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new VellumApi.BadRequestError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 400:
                    throw new VellumApi.NotFoundError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 400:
                    throw new VellumApi.InternalServerError(
                        await serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.VellumApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumApiTimeoutError();
            case "unknown":
                throw new errors.VellumApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    private _completionActuals: CompletionActuals | undefined;

    public get completionActuals(): CompletionActuals {
        return (this._completionActuals ??= new CompletionActuals(this.options));
    }

    private _document: Document | undefined;

    public get document(): Document {
        return (this._document ??= new Document(this.options));
    }
}
