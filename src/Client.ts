/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import * as Vellum from "./api";
import urlJoin from "url-join";
import * as serializers from "./serialization";
import * as errors from "./errors";
import { Deployments } from "./api/resources/deployments/client/Client";
import { DocumentIndexes } from "./api/resources/documentIndexes/client/Client";
import { Documents } from "./api/resources/documents/client/Client";
import { ModelVersions } from "./api/resources/modelVersions/client/Client";
import { RegisteredPrompts } from "./api/resources/registeredPrompts/client/Client";
import { Sandboxes } from "./api/resources/sandboxes/client/Client";
import { TestSuites } from "./api/resources/testSuites/client/Client";

export declare namespace VellumClient {
    interface Options {
        environment?: environments.VellumEnvironment | environments.VellumEnvironmentUrls;
        apiKey: core.Supplier<string>;
    }
}

export class VellumClient {
    constructor(protected readonly options: VellumClient.Options) {}

    /**
     * <strong style="background-color:#ffc107; color:white; padding:4px; border-radius:4px">Unstable</strong>
     *
     * Executes a deployed Workflow and streams back its results.
     */
    public async executeWorkflowStream(
        request: Vellum.ExecuteWorkflowStreamRequest,
        cb: (data: Vellum.WorkflowStreamEvent) => void,
        opts?: Pick<core.StreamingFetcher.Args, "onError" | "onFinish" | "abortController" | "timeoutMs">
    ): Promise<void> {
        const _queue = new core.CallbackQueue();
        await core.streamingFetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumEnvironment.Production).predict,
                "v1/execute-workflow-stream"
            ),
            method: "POST",
            headers: {
                X_API_KEY: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.ExecuteWorkflowStreamRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            onData: _queue.wrap(async (data) => {
                const parsed = await serializers.WorkflowStreamEvent.parse(data, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                });
                if (parsed.ok) {
                    cb(parsed.value);
                } else {
                    opts?.onError?.(parsed.errors);
                }
            }),
            onError: opts?.onError != null ? _queue.wrap(opts.onError) : undefined,
            onFinish: opts?.onFinish != null ? _queue.wrap(opts.onFinish) : undefined,
            abortController: opts?.abortController,
        });
    }

    /**
     * <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>
     *
     * Generate a completion using a previously defined deployment.
     *
     * **Note:** Uses a base url of `https://predict.vellum.ai`.
     * @throws {Vellum.BadRequestError}
     * @throws {Vellum.ForbiddenError}
     * @throws {Vellum.NotFoundError}
     * @throws {Vellum.InternalServerError}
     */
    public async generate(request: Vellum.GenerateBodyRequest): Promise<Vellum.GenerateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumEnvironment.Production).predict,
                "v1/generate"
            ),
            method: "POST",
            headers: {
                X_API_KEY: await core.Supplier.get(this.options.apiKey),
            },
            contentType: "application/json",
            body: await serializers.GenerateBodyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.GenerateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body);
                case 403:
                    throw new Vellum.ForbiddenError(
                        await serializers.GenerateErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>
     *
     * Generate a stream of completions using a previously defined deployment.
     *
     * **Note:** Uses a base url of `https://predict.vellum.ai`.
     * @throws {Vellum.BadRequestError}
     * @throws {Vellum.ForbiddenError}
     * @throws {Vellum.NotFoundError}
     * @throws {Vellum.InternalServerError}
     */
    public async generateStream(
        request: Vellum.GenerateStreamBodyRequest,
        cb: (data: Vellum.GenerateStreamResponse) => void,
        opts?: Pick<core.StreamingFetcher.Args, "onError" | "onFinish" | "abortController" | "timeoutMs">
    ): Promise<void> {
        const _queue = new core.CallbackQueue();
        await core.streamingFetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumEnvironment.Production).predict,
                "v1/generate-stream"
            ),
            method: "POST",
            headers: {
                X_API_KEY: await core.Supplier.get(this.options.apiKey),
            },
            body: await serializers.GenerateStreamBodyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            onData: _queue.wrap(async (data) => {
                const parsed = await serializers.GenerateStreamResponse.parse(data, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                });
                if (parsed.ok) {
                    cb(parsed.value);
                } else {
                    opts?.onError?.(parsed.errors);
                }
            }),
            onError: opts?.onError != null ? _queue.wrap(opts.onError) : undefined,
            onFinish: opts?.onFinish != null ? _queue.wrap(opts.onFinish) : undefined,
            abortController: opts?.abortController,
        });
    }

    /**
     * <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>
     *
     * Perform a search against a document index.
     *
     * **Note:** Uses a base url of `https://predict.vellum.ai`.
     * @throws {Vellum.BadRequestError}
     * @throws {Vellum.NotFoundError}
     * @throws {Vellum.InternalServerError}
     */
    public async search(request: Vellum.SearchRequestBodyRequest): Promise<Vellum.SearchResponse> {
        const _response = await core.fetcher({
            url: urlJoin((this.options.environment ?? environments.VellumEnvironment.Production).predict, "v1/search"),
            method: "POST",
            headers: {
                X_API_KEY: await core.Supplier.get(this.options.apiKey),
            },
            contentType: "application/json",
            body: await serializers.SearchRequestBodyRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.SearchResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * <strong style="background-color:#4caf50; color:white; padding:4px; border-radius:4px">Stable</strong>
     *
     * Used to submit feedback regarding the quality of previously generated completions.
     *
     * **Note:** Uses a base url of `https://predict.vellum.ai`.
     * @throws {Vellum.BadRequestError}
     * @throws {Vellum.NotFoundError}
     * @throws {Vellum.InternalServerError}
     */
    public async submitCompletionActuals(request: Vellum.SubmitCompletionActualsRequest): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(
                (this.options.environment ?? environments.VellumEnvironment.Production).predict,
                "v1/submit-completion-actuals"
            ),
            method: "POST",
            headers: {
                X_API_KEY: await core.Supplier.get(this.options.apiKey),
            },
            contentType: "application/json",
            body: await serializers.SubmitCompletionActualsRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Vellum.BadRequestError(_response.error.body);
                case 404:
                    throw new Vellum.NotFoundError(_response.error.body);
                case 500:
                    throw new Vellum.InternalServerError(_response.error.body);
                default:
                    throw new errors.VellumError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.VellumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.VellumTimeoutError();
            case "unknown":
                throw new errors.VellumError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected _deployments: Deployments | undefined;

    public get deployments(): Deployments {
        return (this._deployments ??= new Deployments(this.options));
    }

    protected _documentIndexes: DocumentIndexes | undefined;

    public get documentIndexes(): DocumentIndexes {
        return (this._documentIndexes ??= new DocumentIndexes(this.options));
    }

    protected _documents: Documents | undefined;

    public get documents(): Documents {
        return (this._documents ??= new Documents(this.options));
    }

    protected _modelVersions: ModelVersions | undefined;

    public get modelVersions(): ModelVersions {
        return (this._modelVersions ??= new ModelVersions(this.options));
    }

    protected _registeredPrompts: RegisteredPrompts | undefined;

    public get registeredPrompts(): RegisteredPrompts {
        return (this._registeredPrompts ??= new RegisteredPrompts(this.options));
    }

    protected _sandboxes: Sandboxes | undefined;

    public get sandboxes(): Sandboxes {
        return (this._sandboxes ??= new Sandboxes(this.options));
    }

    protected _testSuites: TestSuites | undefined;

    public get testSuites(): TestSuites {
        return (this._testSuites ??= new TestSuites(this.options));
    }
}
